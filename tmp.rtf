1  What the prototype is proving
	•	Goal: show that a vessel can be recognised purely from its RF “fingerprint” (Wi-Fi, Bluetooth, radar meta-data, etc.) without trusting whatever it claims over AIS.
	•	AI role: the eventual model outputs Predicted Vessel ID for every ping. In this placeholder we hard-wire pred_id = true_id, but the UX is already wired for real predictions.
	•	Mission payoff: once you know the true identity from fingerprinting you can spot
	•	Spoof – a vessel is lying about its MMSI,
	•	Dark  – a vessel stopped broadcasting AIS entirely.


    
2. what you see in the map
Visual element   Meaning
Green, Red, Orange circles: Every RF ping. The colour encodes the status at that instant (legend bottom-left).
Blue line: Trail for that vessel onlyâ€”no cross-vessel spider-webs.
Pop-up (click a circle): All metadata for that single ping (time-stamp, IDs, Wi-Fi / BT counts, RSSI).


3  Fields shown in each pop-up
True ID
Ground-truth MMSI in the evaluation set (what really sent the RF)
Label column in stream_demo_close.csv
Predicted ID
What the fingerprint model believes it is (currently set equal to True ID; swap with real model later)
Model output vector
Claimed ID
The MMSI the vessel is actually broadcasting over AIS; may be blank
claimed_id column
Status
Normal / Spoof / Dark â€” derived on the fly from the three IDs
status_and_colour() helper
Wi-Fi, BT, RSSI
Sample RF metadata you would feed into the model
Same CSV row
Timestamp
When the ping occurred
timestamp column



4  Workflow to explain out loud
	1.	Press Start – the script replays 40 pings per vessel.
Every new ping drops another coloured dot and extends its vessel’s blue trail.
	2.	Point out a red dot – “Here the fingerprint still matches vessel V-222, but the AIS suddenly claims ID 444444444, so we flag a Spoof.”
	3.	Point out an orange dot – “V-333 went ‘radio-silent’; fingerprint says it’s still the same boat, but AIS is blank → Dark.”
	4.	Click a dot – highlight how the pop-up lets an analyst see exactly which RF counts and IDs triggered the alert.

⸻

5  How this maps to the final system
	•	Swap-in the trained classifier – replace one line:
pred_id = model.predict(feature_vector)
The rest of the UI, status logic, legend, and pop-ups stay unchanged.
	•	More vessels – the dictionaries (markers, trails) scale naturally; performance is gated only by browser load.
	•	Confusion-matrix & metrics – after batch-predicting, use the earlier scikit-learn snippet to show how well the model separates vessels.